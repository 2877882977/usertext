<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="usertext.basic.dao.UserMapper">
  <resultMap id="BaseResultMap" type="usertext.basic.entity.User">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="password_hash" jdbcType="VARCHAR" property="passwordHash" />
    <result column="registration_date" jdbcType="TIMESTAMP" property="registrationDate" />
  </resultMap>
  <sql id="Base_Column_List">
    user_id, username, email, password_hash, registration_date
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from users
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="usertext.basic.entity.User">
    insert into users (user_id, username, email, 
      password_hash, registration_date)
    values (#{userId,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{passwordHash,jdbcType=VARCHAR}, #{registrationDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="usertext.basic.entity.User">
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="passwordHash != null">
        password_hash,
      </if>
      <if test="registrationDate != null">
        registration_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="passwordHash != null">
        #{passwordHash,jdbcType=VARCHAR},
      </if>
      <if test="registrationDate != null">
        #{registrationDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="usertext.basic.entity.User">
    update users
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="passwordHash != null">
        password_hash = #{passwordHash,jdbcType=VARCHAR},
      </if>
      <if test="registrationDate != null">
        registration_date = #{registrationDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="usertext.basic.entity.User">
    update users
    set username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password_hash = #{passwordHash,jdbcType=VARCHAR},
      registration_date = #{registrationDate,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <select id="selectByUserEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from users
    where email = #{email,jdbcType=INTEGER}
  </select>
  <update id="userUpd" parameterType="usertext.basic.entity.User">
    update users
    set username = #{username,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        password_hash = #{passwordHash,jdbcType=VARCHAR},
        registration_date = #{registrationDate,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <select id="groupAndFilterUser" parameterType="java.lang.Integer" resultType="map">
    select u.registration_date AS registration_date,
           COUNT(u.user_id) AS count
    from users u
      INNER JOIN user_extra_info uei ON u.user_id = uei.user_id
    where uei.age >= #{age,jdbcType=INTEGER}
    GROUP BY u.registration_date
    ORDER BY u.registration_date
  </select>
</mapper>